################
# CANNIBAL EVENTS #
################

namespace = cannibal

#cannibal.1001-1999 - Guardian coverts ward
#cannibal.2001-2899 - Convert to cannibalism scheme
#cannibal.2900-2999 - Reveal as cannibal interaction
#cannibal.3001-3999 - Become cannibal
#cannibal.4001-4999 - Devour prisoner
#

##########################
# GUARDIAN CONVERTS WARD #
##########################

cannibal.1001 = {
	hidden = yes
	
	trigger = {
		is_cannibal_trigger = no
		any_relation = {
			type = guardian
			is_cannibal_trigger = yes
		}
	}

	immediate = {
		#If child (and guardian?) is AI and house has dynasty of cannibals modifier, immediately convert them
		if = {
			limit = {
				is_ai = yes
				exists = house
				house = {
					has_house_modifier = dynasty_of_cannibals
				}
			}
			house = {
				house_head = {
					add_to_list = cannibal_message
				}
			}
			every_parent = {
				limit = {
					is_ruler = yes
					is_cannibal_trigger = yes
				}
				add_to_list = cannibal_message
			}
			every_in_list = {
				list = cannibal_message
				send_interface_message = {
					type = event_generic_good
					title = cannibal.1001.message
					left_icon = root
					root = {
						give_cannibal_secret_or_trait_effect = yes

						random_secret = {
							limit = { secret_type = secret_cannibal }
							reveal_to = house.house_head
						}
					}
				}
			}
		}
		#For player children (or guardian?) or childrent without dynasty of cannibals house modifier, send guardian choice event
		else = {
			save_scope_as = child
			random_relation = { type = guardian trigger_event = cannibal.1002 }
		}
	}
}	

scripted_trigger cannibal_1002_allow_reveal_outcome_trigger = {
	exists = scope:child.liege
	scope:guardian = {
		NOT = { this = scope:child.liege }
		any_secret = {
			secret_type = secret_cannibal
			OR = {
				NOT = { is_known_by = scope:child }
				NOT = { is_known_by = scope:child.liege }
			}
		}
	}
}

#Guardian: convert this child?
cannibal.1002 = {
	type = character_event
	title = cannibal.1002.t
	desc = cannibal.1002.desc
	theme = witchcraft
	override_background = {
		event_background = study
	}
	left_portrait = scope:child

	immediate = { save_scope_as = guardian }
	
	#Convert them
	option = {
		name = cannibal.1002.a

		#Duel if child is AI
		if = {
			limit = { scope:child = { is_ai = yes } }
			duel = {
				skill = learning
				target = scope:child
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 2.5
					}
					opinion_modifier = {
						who = scope:child
						opinion_target = scope:guardian
						multiplier = 0.25
						step = 5
					}
					modifier = {
						scope:child = { has_trait = ambitious }
						add = 20
					}
					modifier = {
						scope:child = { has_trait = curious }
						add = 20
					}
					desc = child_cannibal_conversion_success_effect.desc
					child_cannibal_conversion_success_effect = yes
				}
				35 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -2.5
					}
					opinion_modifier = {
						who = scope:child
						opinion_target = scope:guardian
						multiplier = -0.25
						step = 5
					}
					modifier = {
						scope:child = { has_trait = craven }
						add = 30
					}
					desc = child_cannibal_conversion_failure_effect.desc
					child_cannibal_conversion_failure_effect = yes
				}
				15 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -2.5
					}
					opinion_modifier = {
						who = scope:child
						opinion_target = scope:guardian
						multiplier = -0.25
						step = 5
					}
					modifier = {
						scope:child = { has_trait = zealous }
						add = 150
					}
					trigger = {
						cannibal_1002_allow_reveal_outcome_trigger = yes
					}
					desc = child_cannibal_conversion_critical_failure_effect.desc
					child_cannibal_conversion_critical_failure_effect = yes
				}
			}
		}
		else = {
			show_as_tooltip = {
				random_list = {
					1 = {
						show_chance = no
						desc = child_cannibal_conversion_success_effect.desc
						child_cannibal_conversion_success_effect = yes
					}
					1 = {
						show_chance = no
						desc = child_cannibal_conversion_failure_effect.desc
						child_cannibal_conversion_failure_effect = yes
					}
					1 = {
						show_chance = no
						trigger = {
							cannibal_1002_allow_reveal_outcome_trigger = yes
						}
						desc = child_cannibal_conversion_critical_failure_effect.desc
						child_cannibal_conversion_critical_failure_effect = yes
					}
				}
			}

			scope:child = {
				trigger_event = cannibal.1003
			}
		}
		
		ai_chance = {
			base = 100

			ai_boldness_target_modifier = { VALUE = 50 }

			# Player children of dynasty of cannibals should always be asked
			modifier = {
				scope:child = {
					exists = house
					house = { has_modifier = dynasty_of_cannibals }
					is_ai = no
				}
				add = 1000
			}
		}
	}

	#Don't risk it
	option = {
		name = cannibal.1002.b

		ai_chance = {
			base = 0

			ai_boldness_target_modifier = { VALUE = -100 }

			modifier = {
				exists = liege
				OR = {
					trait_is_criminal_in_faith_trigger = { TRAIT = cannibal FAITH = liege.faith GENDER_CHARACTER = root }
				}
				add = 100
			}

			# Player children of dynasty of cannibals should always be asked
			modifier = {
				scope:child = {
					exists = house
					house = { has_modifier = dynasty_of_cannibals }
					is_ai = no
				}
				add = -1000
			}
		}
	}
}


#Do I want to become a cannibal?
cannibal.1003 = {
	type = character_event
	title = cannibal.1003.t
	desc = cannibal.1003.desc
	theme = witchcraft
	override_background = {
		event_background = study
	}
	left_portrait = {
		character = scope:guardian
		animation = personality_dishonorable
	}



	#Yes
	option = {
		name = cannibal.1003.a
		
		child_cannibal_conversion_success_effect = yes
	}

	#No...
	option = {
		name = cannibal.1003.b

		child_cannibal_conversion_failure_effect = yes
	}
	
	#I will tell someone!
	option = {
		trigger = {
			cannibal_1002_allow_reveal_outcome_trigger = yes
		}
		name = cannibal.1003.c

		child_cannibal_conversion_critical_failure_effect = yes
	}
}



##############################################
#####CONVERT TO CANNIBALISM SCHEME EVENTS#####
##############################################

#Do I want to go ahead with this?
cannibal.2001 = {
	type = character_event
	title = cannibal.2001.t
	desc = {
		desc = cannibal.2001.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = cannibal GENDER_CHARACTER = root } }
				desc = cannibal.2001.secrecy.desc
			}
			desc = cannibal.2001.no_secrecy.desc
		}
		desc = cannibal.2001.end.desc
	}
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = scope:target
	
	#Yes
		option = {
		name = cannibal.2001.a
		custom_tooltip = cannibal.2001.a.tt

		if = {
			limit = { scope:target = { is_ai = no } }
			scope:target = {
				trigger_event = {
					id = cannibal.2002
					days = 3
				}
			}
		}
		else_if = {
			limit = { exists = scope:scheme_successful }
			trigger_event = {
				id = cannibal.2003
				days = 3
			}
		}
		else = {
			trigger_event = {
				on_action = convert_to_cannibalism_failure_outcome
				days = 3
			}
		}

		ai_chance = {
			base = 100
		}
	}

	#No
	option = {
		name = {
			trigger = { use_convert_to_cannibalism_secrecy_trigger = yes }
			text = cannibal.2001.b1
		}
		name = {
			trigger = { use_convert_to_cannibalism_secrecy_trigger = yes }
			text = cannibal.2001.b2
		}
		scope:scheme = {
			end_scheme = yes
		}

		ai_chance = {
			base = 0
		}
	}
}

#Someone is trying to convert me to become a cannibal (player only)
cannibal.2002 = {
	type = character_event
	title = cannibal.2002.t
	desc = {
		desc = cannibal.2002.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = cannibal.2002.discovery.desc
			}
			desc = cannibal.2002.no_discovery.desc
		}
		desc = cannibal.2002.end.desc
	}
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:left_portrait
		triggered_animation = {
			trigger = { scope:left_portrait = root }
			animation = disbelief
		}
		animation = personality_dishonorable
	}
	
	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			scope:owner = {
				save_scope_as = left_portrait
				show_as_tooltip = {
					random_secret = {
						limit = {
							secret_type = secret_cannibal
							NOT = { is_known_by = root }
						}
						reveal_to = root
					}
				}
			}
		}
		else = {
			save_scope_as = left_portrait
		}
	}

	#Yes I want to be a cannibal
	option = {
		name = cannibal.2002.a

		show_as_tooltip = {
			give_cannibal_secret_or_trait_effect = yes
		}

		if = {
			limit = {
				faith = {
					NOT = { has_doctrine = tenet_ritual_cannibalism }
				}
			}
			add_piety = medium_piety_loss
		}
		
		scope:owner = {
			trigger_event = cannibal.2003
		}

		stress_impact = {
			zealous = massive_stress_impact_gain
			craven = medium_stress_impact_gain
			gluttonous = medium_stress_impact_loss
		}
	}

	#No I don't want to be a cannibal
	option = {
		name = cannibal.2002.b

		if = {
			limit = {
				faith = {
					NOT = { has_doctrine = tenet_ritual_cannibalism }
				}
			}
			add_piety = medium_piety_gain
		}

		scope:owner = {
			trigger_event = cannibal.2004
		}

		if = {
			limit = { exists = scope:scheme_discovered }
			reverse_add_opinion = {
				target = scope:owner
				modifier = disappointed_opinion
				opinion = -15
			}
		}

		stress_impact = {
			gluttonous = medium_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}
	}
	
	#Reveal them to the world!
	option = {
		trigger = { exists = scope:scheme_discovered }
		name = cannibal.2002.c

		if = {
			limit = {
				faith = {
					NOT = { has_doctrine = tenet_ritual_cannibalism }
				}
			}
			add_piety = medium_piety_gain
		}

		reverse_add_opinion = {
			target = scope:owner
			modifier = hate_opinion
			opinion = -30
		}

		scope:owner = {
			trigger_event = cannibal.2005
		}

		stress_impact = {
			craven = medium_stress_impact_gain
			gluttonous = medium_stress_impact_gain
			compassionate = minor_stress_impact_gain
			trusting = minor_stress_impact_gain
		}
	}
}	

#SUCCESS EVENTS
scripted_trigger cannibal_2003_can_learn_owner_secret = {
	save_temporary_scope_as = secret_learner
	scope:owner = {
		any_secret = {
			secret_type = secret_cannibal
			NOT = { is_known_by = scope:secret_learner }
		}
	}
}

scripted_trigger cannibal_2003_unlock_reveal_trigger = {
	NOT = { exists = scope:scheme_discovered }
	scope:target = { cannibal_2003_can_learn_owner_secret = yes }
}


cannibal.2003 = {
	type = character_event
	title = cannibal.2003.t
	desc = cannibal.2003.desc
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = personality_rational
	}
	immediate = {
		scope:target = {
			give_cannibal_secret_or_trait_effect = yes
			random_secret = {
				limit = { secret_type = secret_cannibal }
				reveal_to = root
			}
		}
		if = {
			limit = { exists = scope:scheme_discovered }
			random_secret = {
				limit = {
					secret_type = secret_cannibal
					NOT = { is_known_by = scope:target }
				}
				reveal_to = scope:target
			}

			reverse_add_opinion = {
				target = scope:target
				modifier = grateful_opinion
				opinion = 20
			}
		}
	}

	#Great!
	option = {
		trigger = { cannibal_2003_unlock_reveal_trigger = no }
		name = cannibal.2003.a

		scope:scheme = {
			end_scheme = yes
		}
	}
	
	#Let them know who I am
	option = {
		trigger = { cannibal_2003_unlock_reveal_trigger = yes }
		name = cannibal.2003.b

		# TODO: Add when grand feast will be implemented
		# if = {
		# 	limit = {
		# 		exists = house
		# 		house = { has_house_modifier = dynasty_of_cannibals }
		# 	}
		# 	custom_tooltip = cannibal.2003.b.tt
		# }

		scope:target = {
			send_interface_message = {
				type = event_generic_good
				title = cannibal.2003.message
				left_icon = scope:owner
				scope:owner = {
					random_secret = {
						limit = {
							secret_type = secret_cannibal
							NOT = { is_known_by = scope:target }
						}
						reveal_to = scope:target
					}
				}
			}
		}

		reverse_add_opinion = {
			target = scope:target
			modifier = grateful_opinion
			opinion = 20
		}

		scope:scheme = {
			end_scheme = yes
		}

		ai_chance = {
			base = 100

			modifier = {
				has_trait = honest
				add = 50
			}
			modifier = {
				has_trait = trusting
				add = 100
			}
		}
	}

	#Keep my secret
	option = {
		trigger = { cannibal_2003_unlock_reveal_trigger = yes }
		name = cannibal.2003.c

		scope:scheme = {
			end_scheme = yes
		}

		ai_chance = {
			base = 50
			modifier = {
				has_trait = paranoid
				add = 100
			}
			modifier = {
				has_trait = craven
				add = 50
			}
			modifier = {
				has_trait = deceitful
				add = 50
			}
		}
	}

	after = {
		#Handle discover
		if = {
			limit = {
				exists = scope:scheme_discovered
				scope:target = {
					is_ai = yes
					OR = {
						AND = {
							is_ruler = no
							exists = liege
							liege = {
								cannibal_2003_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						any_relation = { type = lover cannibal_2003_can_learn_owner_secret = yes }
						any_consort = { cannibal_2003_can_learn_owner_secret = yes }
						any_child = {
							age >= 7
							cannibal_2003_can_learn_owner_secret = yes
						}
					}
				}
			}
			scope:target = { liege = { trigger_event = cannibal.2010 } }
		}
	}
}

#Success, but discovered
cannibal.2010 = {
	type = character_event
	title = cannibal.2010.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_cannibal
						is_known_by = scope:target
					}
				}
				desc = cannibal.talk.2010
			}
			desc = cannibal.leave.2010
		}
		desc = cannibal.end.2010
	}
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = personality_rational
	}
	
	immediate = {
		hidden_effect = {
			scope:target = {
				random_list = {
					3 = {
						trigger = {
							is_ruler = no
							exists = liege
							liege = {
								cannibal_2003_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						liege = { save_scope_as = listener }
					}
					5 = {
						trigger = {
							any_relation = { type = lover cannibal_2003_can_learn_owner_secret = yes }
						}
						random_relation = {
							type = lover
							limit = { cannibal_2003_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					5 = {
						trigger = {
							any_consort = { cannibal_2003_can_learn_owner_secret = yes }
						}
						random_consort = {
							limit = { cannibal_2003_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					1 = {
						trigger = {
							any_child = {
								age >= 7
								cannibal_2003_can_learn_owner_secret = yes
							}
						}
						random_child = {
							limit = {
								age >= 7
								cannibal_2003_can_learn_owner_secret = yes
							}
							save_scope_as = listener
						}
					}
				}
			}
			random_secret = {
				limit = { secret_type = secret_cannibal }
				reveal_to = scope:listener
			}
		}
	}

	option = {
		name = cannibal.2010.a
		custom_tooltip = cannibal.2010.a.tt
	}
}


#FAILURE EVENTS

#They refuse
cannibal.2004 = {
	type = character_event
	title = cannibal.2004.t
	desc = {
		desc = cannibal.2004.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = cannibal.2004.discovered.desc
			}
			desc = cannibal.2004.not_discovered.desc
		}
	}
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = angry
	}

	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			random_secret = {
				limit = {
					secret_type = secret_cannibal
					NOT = { is_known_by = scope:target }
				}
				reveal_to = scope:target
			}
			reverse_add_opinion = {
				target = scope:target
				modifier = impious_opinion
				opinion = -20
			}
		}
		scope:target = {
			add_character_flag = {	
				flag = block_convert_to_cannibalism
				days = 7300
			}
		}
	}
	
	option = {
		name = cannibal.2004.a

		scope:scheme = {
			end_scheme = yes
		}
	}
}

#They tell their liege
cannibal.2005 = {
	type = character_event
	title = cannibal.2004.t
	desc = {
		desc = cannibal.2004.start.desc
		desc = cannibal.2005.end.desc
	}
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = angry
	}
	trigger = {
		scope:target = {
			exists = liege
			is_ruler = no
			liege = { NOT = { this = scope:owner } }
		}
		exists = scope:scheme_discovered
	}

	weight_multiplier = {
		base = 1

		ai_value_modifier = {
			who = scope:target
			ai_zeal = 0.05
			max = 2
			min = -0.5
		}
		opinion_modifier = {
			who = scope:target
			opinion_target = root
			multiplier = -0.05
			max = 2
			min = -0.5
		}
	}


	immediate = {
		random_secret = {
			limit = {
				secret_type = secret_cannibal
			}
			if = {
				limit = { NOT = { is_known_by = scope:target } }
				reveal_to = scope:target
			}
			if = {
				limit = { NOT = { is_known_by = scope:target.liege } }
				reveal_to = scope:target.liege
			}
		}
		scope:target = {
			add_character_flag = {	
				flag = block_convert_to_cannibalism
				days = 7300
			}
		}
		reverse_add_opinion = {
			target = scope:target
			modifier = impious_opinion
			opinion = -20
		}
	}
	
	option = {
		name = cannibal.2005.a
		flavor = cannibal.2005.a.tt

		scope:scheme = {
			end_scheme = yes
		}
	}
}


#Target was already a cannibal! Expose your secrets to each other - for owner
cannibal.2006 = {
	type = character_event
	title = cannibal.2006.t
	desc = cannibal.2006.desc
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = { #Make sure the secrets are still unknown and that target is alive and kicking
		scope:target = {
			is_alive = yes
			any_secret = {
				secret_type = secret_cannibal
				NOT = {  any_secret_knower = { this = root } }
			}
		}
	}

	immediate = {
		scope:target = {
			random_secret = {
				limit = { secret_type = secret_cannibal }
				reveal_to = root
			}
			trigger_event = cannibal.2007
		}
		random_secret = {
			limit = { secret_type = secret_cannibal }
			reveal_to = scope:target
		}
		reverse_add_opinion = {
			target = scope:target
			modifier = respect_opinion
			opinion = 20
		}
	}

	#Great!
	option = {
		name = cannibal.2006.a
	}

	after = {
		scope:scheme = {
			end_scheme = yes
		}
	}
}

#Target was already a cannibal! Expose your secrets to each other - for target
cannibal.2007 = {
	type = character_event
	title = cannibal.2007.t
	desc = cannibal.2007.desc
	theme = witchcraft
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:owner
		animation = shock
	}

	trigger = { #Make sure the secrets are still unknown and that target is alive and kicking
		scope:owner = {
			is_alive = yes
			is_cannibal_trigger = yes
		}
	}

	immediate = {
		show_as_tooltip = {
			scope:owner = {
				random_secret = {
					limit = { secret_type = secret_cannibal }
					reveal_to = root
				}
			}
			random_secret = {
				limit = { secret_type = secret_cannibal }
				reveal_to = scope:owner
			}
		}
		reverse_add_opinion = {
			target = scope:owner
			modifier = respect_opinion
			opinion = 20
		}
	}

	#Great!
	option = {
		name = cannibal.2007.a
	}
}

###############################
# REVEAL AS CANNIBAL INTERACTION #
###############################

cannibal.2900 = {
	type = letter_event
	opening = cannibal.2900.t
	desc = cannibal.2900.desc
	sender = scope:actor

	immediate = {
		scope:cannibal_secret = { reveal_to = root }
		hidden_effect = {
			if = {
				limit = { can_set_relation_potential_friend_trigger = { CHARACTER = scope:actor } }
				set_relation_potential_friend = scope:actor
			}
		}
	}

	option = {
		name = cannibal.2900.a
		scope:actor = {
			trigger_event = {
				id = cannibal.2901
				days = 3
			}
		}
	}
}

cannibal.2901 = {
	type = letter_event
	opening = cannibal.2901.t
	desc = cannibal.2901.desc
	sender = scope:recipient

	option = {
		name = cannibal.2901.a
	}
}

#########################
# BECOME CANIBAL EVENTS #
#########################

# Basically stolen HL.1500 event from CK2
cannibal.3001 = {
	type = character_event
	title = cannibal.3001.t
	desc = cannibal.3001.desc
	theme = mental_health
	left_portrait = {
		character = root
		animation = paranoia
	}

	trigger = {
		has_trait = lunatic
		is_cannibal_trigger = no
		is_ai = no
		NOT = { has_character_flag = wolf_resisted_cannibalism }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			has_trait = cruel
			factor = 1.5
		}

		modifier = {
			has_trait = possessed
			factor = 1.5
		}

		modifier = {
			has_trait = gluttonous
			factor = 1.5
		}

		modifier = {
			OR = {
				has_trait = hunter_1
				has_trait = hunter_2
				has_trait = hunter_3
			}
			factor = 1.5
		}

		modifier = {
			has_trait = temperate
			factor = 0.5
		}

		modifier = {
			has_trait = kind
			factor = 0.5
		}

		# Why would this influence it?
		modifier = {
			has_trait = charitable
			factor = 0.5
		}
	}

	# Eat someone
	option = {
		name = cannibal.3001.eat
		random_courtier = {
			limit = {
				is_adult = yes
				is_ai = yes
				NOR = {
					is_mother_of_compare_character_trigger = yes
					is_father_of_compare_character_trigger = yes
				}
			}

			death = {
				death_reason = death_murder
				killer = root
			}
		}
		
		root = {
			give_cannibal_secret_or_trait_effect = yes
		}

		# TODO: Add stress and possibly piety loss
	}

	option = {
		name = cannibal.3001.resist

		# TODO: change amount of stress based on traits
		add_stress = massive_stress_impact_gain

		add_character_flag = {
			flag = wolf_resisted_cannibalism
		}
	}
}

cannibal.4001 = {
	type = character_event
	title = cannibal.4001.t
	desc = cannibal.4001.desc
	theme = prison

	left_portrait = {
		character = root
		animation = schadenfreude
	}

	right_portrait = {
		character = scope:recipient
		animation = fear
	}

	option = {
		name = cannibal.4001.devour

		### Congenital traits
		# Genius
		if = {
			limit = {
				scope:recipient = {
					has_trait = intellect_good_3
				}
				NOT = { has_trait = intellect_good_3 }
			}
			if = {
				limit = {
					has_trait = intellect_bad_3
				}
				remove_trait = intellect_bad_3
			}
			if = {
				limit = {
					has_trait = intellect_bad_2
				}
				remove_trait = intellect_bad_2
			}
			if = {
				limit = {
					has_trait = intellect_bad_1
				}
				remove_trait = intellect_bad_1
			}
			if = {
				limit = {
					has_trait = intellect_good_1
				}
				remove_trait = intellect_good_1
			}
			if = {
				limit = {
					has_trait = intellect_good_2
				}
				remove_trait = intellect_good_2
			}
			add_trait = intellect_good_3
		}

		# Intelligent
		if = {
			limit = {
				scope:recipient = {
					has_trait = intellect_good_2
				}
				NOT = { has_trait = intellect_good_3 }
				NOT = { has_trait = intellect_good_2 }
			}
			if = {
				limit = {
					has_trait = intellect_bad_3
				}
				remove_trait = intellect_bad_3
			}
			if = {
				limit = {
					has_trait = intellect_bad_2
				}
				remove_trait = intellect_bad_2
			}
			if = {
				limit = {
					has_trait = intellect_bad_1
				}
				remove_trait = intellect_bad_1
			}
			if = {
				limit = {
					has_trait = intellect_good_1
				}
				remove_trait = intellect_good_1
			}
			add_trait = intellect_good_2
		}

		# Quick
		if = {
			limit = {
				scope:recipient = {
					has_trait = intellect_good_1
				}
				NOT = { has_trait = intellect_good_3 }
				NOT = { has_trait = intellect_good_2 }
				NOT = { has_trait = intellect_good_1 }
			}
			if = {
				limit = {
					has_trait = intellect_bad_3
				}
				remove_trait = intellect_bad_3
			}
			if = {
				limit = {
					has_trait = intellect_bad_2
				}
				remove_trait = intellect_bad_2
			}
			if = {
				limit = {
					has_trait = intellect_bad_1
				}
				remove_trait = intellect_bad_1
			}
			add_trait = intellect_good_1
		}

		# Herculean
		if = {
			limit = {
				scope:recipient = {
					has_trait = physique_good_3
				}
				NOT = { has_trait = physique_good_3 }
			}
			if = {
				limit = {
					has_trait = physique_bad_3
				}
				remove_trait = physique_bad_3
			}
			if = {
				limit = {
					has_trait = physique_bad_2
				}
				remove_trait = physique_bad_2
			}
			if = {
				limit = {
					has_trait = physique_bad_1
				}
				remove_trait = physique_bad_1
			}
			if = {
				limit = {
					has_trait = physique_good_1
				}
				remove_trait = physique_good_1
			}
			if = {
				limit = {
					has_trait = physique_good_2
				}
				remove_trait = physique_good_2
			}
			add_trait = physique_good_3
		}

		# Robust
		if = {
			limit = {
				scope:recipient = {
					has_trait = physique_good_2
				}
				NOT = { has_trait = physique_good_3 }
				NOT = { has_trait = physique_good_2 }
			}
			if = {
				limit = {
					has_trait = physique_bad_3
				}
				remove_trait = physique_bad_3
			}
			if = {
				limit = {
					has_trait = physique_bad_2
				}
				remove_trait = physique_bad_2
			}
			if = {
				limit = {
					has_trait = physique_bad_1
				}
				remove_trait = physique_bad_1
			}
			if = {
				limit = {
					has_trait = physique_good_1
				}
				remove_trait = physique_good_1
			}
			add_trait = physique_good_2
		}

		# Hale
		if = {
			limit = {
				scope:recipient = {
					has_trait = physique_good_1
				}
				NOT = { has_trait = physique_good_3 }
				NOT = { has_trait = physique_good_2 }
				NOT = { has_trait = physique_good_1 }
			}
			if = {
				limit = {
					has_trait = physique_bad_3
				}
				remove_trait = physique_bad_3
			}
			if = {
				limit = {
					has_trait = physique_bad_2
				}
				remove_trait = physique_bad_2
			}
			if = {
				limit = {
					has_trait = physique_bad_1
				}
				remove_trait = physique_bad_1
			}
			add_trait = physique_good_1
		}

		### Personality traits
		if = {
			limit = {
				scope:recipient = {
					has_trait = compassionate
				}
				NOT = { has_trait = compassionate }
			}
			add_trait = compassionate
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = wrathful
				}
				NOT = { has_trait = wrathful }
			}
			add_trait = wrathful
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = forgiving
				}
				NOT = { has_trait = forgiving }
			}
			add_trait = forgiving
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = calm
				}
				NOT = { has_trait = calm }
			}
			add_trait = calm
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = fickle
				}
				NOT = { has_trait = fickle }
			}
			add_trait = fickle
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = chaste
				}
				NOT = { has_trait = chaste }
			}
			add_trait = chaste
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = lustful
				}
				NOT = { has_trait = lustful }
			}
			add_trait = lustful
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = temperate
				}
				NOT = { has_trait = temperate }
			}
			add_trait = temperate
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = gluttonous
				}
				NOT = { has_trait = gluttonous }
			}
			add_trait = gluttonous
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = generous
				}
				NOT = { has_trait = generous }
			}
			add_trait = generous
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = greedy
				}
				NOT = { has_trait = greedy }
			}
			add_trait = greedy
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = diligent
				}
				NOT = { has_trait = diligent }
			}
			add_trait = diligent
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = lazy
				}
				NOT = { has_trait = lazy }
			}
			add_trait = lazy
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = patient
				}
				NOT = { has_trait = patient }
			}
			add_trait = patient
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = gregarious
				}
				NOT = { has_trait = gregarious }
			}
			add_trait = gregarious
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = kind
				}
				NOT = { has_trait = kind }
			}
			add_trait = kind
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = impatient
				}
				NOT = { has_trait = impatient }
			}
			add_trait = impatient
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = humble
				}
				NOT = { has_trait = humble }
			}
			add_trait = humble
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = callous
				}
				NOT = { has_trait = callous }
			}
			add_trait = callous
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = deceitful
				}
				NOT = { has_trait = deceitful }
			}
			add_trait = deceitful
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = honest
				}
				NOT = { has_trait = honest }
			}
			add_trait = honest
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = craven
				}
				NOT = { has_trait = craven }
			}
			add_trait = craven
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = brave
				}
				NOT = { has_trait = brave }
			}
			add_trait = brave
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = shy
				}
				NOT = { has_trait = shy }
			}
			add_trait = shy
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = gregarious
				}
				NOT = { has_trait = gregarious }
			}
			add_trait = gregarious
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = ambitious
				}
				NOT = { has_trait = ambitious }
			}
			add_trait = ambitious
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = content
				}
				NOT = { has_trait = content }
			}
			add_trait = content
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = arbitrary
				}
				NOT = { has_trait = arbitrary }
			}
			add_trait = arbitrary
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = just
				}
				NOT = { has_trait = just }
			}
			add_trait = just
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = cynical
				}
				NOT = { has_trait = cynical }
			}
			add_trait = cynical
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = zealous
				}
				NOT = { has_trait = zealous }
			}
			add_trait = zealous
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = paranoid
				}
				NOT = { has_trait = paranoid }
			}
			add_trait = paranoid
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = trusting
				}
				NOT = { has_trait = trusting }
			}
			add_trait = trusting
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = cruel
				}
				NOT = { has_trait = cruel }
			}
			add_trait = cruel
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = vengeful
				}
				NOT = { has_trait = vengeful }
			}
			add_trait = vengeful
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = stubborn
				}
				NOT = { has_trait = stubborn }
			}
			add_trait = stubborn
		}
		if = {
			limit = {
				scope:recipient = {
					has_trait = sadistic
				}
				NOT = { has_trait = sadistic }
			}
			add_trait = sadistic
		}
	}
}